import os
import re
import json
import inspect
from typing import Dict, List, Optional, Callable


class FlowPilot:
    CATEGORIES = ["data_reader", "data_cleaner", "data_writer"]

    def __init__(self, project_name: str):
        self.project_name = project_name
        self.functions: Dict[str, Dict[str, Optional[str]]] = {
            category: {} for category in self.CATEGORIES
        }

        # create project directory if it doesn't exist
        if not os.path.exists(project_name):
            os.makedirs(project_name)

    def register_function(
        self, category: str, comment: Optional[str] = None
    ) -> Callable:
        def decorator(func: Callable) -> Callable:
            func_name = func.__name__
            func.__category__ = (
                category  # add __category__ attribute to decorated function
            )
            self.functions[category][func_name] = comment
            return func

        return decorator

    def data_reader(self, comment: Optional[str] = None) -> Callable:
        return self.register_function("data_reader", comment)

    def data_cleaner(self, comment: Optional[str] = None) -> Callable:
        return self.register_function("data_cleaner", comment)

    def data_writer(self, comment: Optional[str] = None) -> Callable:
        return self.register_function("data_writer", comment)

    def is_valid_category(self, category_name: str) -> bool:
        return category_name in self.CATEGORIES

    def create_category(
        self, category_name: str, description: Optional[str] = None
    ) -> None:
        if category_name in self.CATEGORIES:
            print(f"Category '{category_name}' already exists.")
        else:
            self.CATEGORIES.append(category_name)
            self.functions[category_name] = {}
            setattr(
                self, category_name, self.register_function(category_name, description)
            )

    def custom(self, category_name: str, comment: Optional[str] = None) -> Callable:
        if not self.is_valid_category(category_name):
            self.create_category(category_name)
        return self.register_function(category_name, comment)

    def display_functions(self) -> None:
        function_data: Dict[str, Union[str, Dict[str, List[Dict[str, str]]]]] = {
            "project_name": self.project_name,
            "functions": {},
        }
        function_data["functions"] = {
            category: [
                {"name": func_name, "comment": comment or "no comment"}
                for func_name, comment in functions.items()
            ]
            for category, functions in self.functions.items()
            if functions
        }
        print(json.dumps(function_data, indent=4))

    def remove_decorator(func_str: str) -> str:
        # Define the regular expression to match the decorator pattern
        pattern = r"@\w+\.[a-z_]+\(.+?\)\n"
        match = re.search(pattern, func_str)
        if match:
            func_str = func_str[: match.start()] + func_str[match.end() :]
        return func_str

    def create_script_file(
        self, category_name: str, functions: Dict[str, Optional[str]]
    ) -> None:
        category_path = os.path.join(self.project_name, category_name)
        os.makedirs(category_path, exist_ok=True)
        file_path = os.path.join(category_path, f"{category_name}.py")
        with open(file_path, "w") as f:
            f.write("# This file was generated by FlowPilot\n\n")
            for func_name, _ in functions.items():
                func = globals().get(func_name)
                source = remove_decorator(inspect.getsource(func))
                f.write(f"{source}\n\n")

    def compile_scripts_for_category(self, category_name: str) -> None:
        functions = self.functions[category_name]
        if not functions:
            return
        self.create_script_file(category_name, functions)

    def compile_scripts(self, category: str = "all") -> str:
        if category == "all":
            categories = self.CATEGORIES
        elif not self.is_valid_category(category):
            raise ValueError(f"{category} is not a valid category name.")
        else:
            categories = [category]

        for category_name in categories:
            self.compile_scripts_for_category(category_name)

        return "SUCCESS"
